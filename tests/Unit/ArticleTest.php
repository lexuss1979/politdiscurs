<?php

namespace Tests\Unit;

use App\Article;
use App\Author;
use App\ContentType;
use App\File;
use App\Region;
use App\Source;
use App\Topic;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ArticleTest extends TestCase
{
    use RefreshDatabase;

    protected $article = null;
    protected function setUp(): void
    {
       parent::setUp(); // TODO: Change the autogenerated stub
        if( is_null($this->article)) {
            $this->article = factory(Article::class)->create(
                ['title'=>'This is a test article']
            );
        }
    }

    /** @test */
    public function it_can_create_an_article()
    {
        $this->assertDatabaseMissing('articles',['title'=>'test']);
        $article = factory(Article::class)->create(
            ['title'=>'test']
        );

        $this->assertDatabaseHas('articles',['title'=>'test']);


    }

    /** @test */
    public function article_has_author()
    {
        $this->assertInstanceOf(Author::class, $this->article->author);
        $this->assertGreaterThan(0,$this->article->author->id);
    }

    /** @test */
    public function it_has_parent_topic()
    {
        $this->assertInstanceOf(Topic::class, $this->article->topic);
        $this->assertGreaterThan(0,$this->article->topic->id);
    }

    /** @test */
    public function it_has_content_type()
    {
        $this->assertInstanceOf(ContentType::class, $this->article->contentType);
        $this->assertGreaterThan(0,$this->article->contentType->id);
    }

    /** @test */
    public function it_has_region()
    {
        $this->assertInstanceOf(Region::class, $this->article->region);
        $this->assertGreaterThan(0,$this->article->region->id);
    }

    /** @test */
    public function it_has_source()
    {
        $this->assertInstanceOf(Source::class, $this->article->source);
        $this->assertGreaterThan(0,$this->article->source->id);
    }

    /** @test */
    public function it_has_file(){
        $this->assertInstanceOf(File::class, $this->article->file);
        $this->assertGreaterThan(0,$this->article->file->id);
    }

    /** @test */
    public function it_can_hasnt_file()
    {
        $article = $this->article = factory(Article::class)->create(
            [
                'title'=>'This is a test article',
                'file_id' => null
                ]
        );
        $this->assertNull($this->article->file);
    }


    /** @test */
    public function it_can_return_filtered_list()
    {
        $filtered = Article::getFilteredList();
        $this->assertCount(1,$filtered);

        $articles = factory(Article::class, 10)->create();
        $filtered = Article::getFilteredList();
        $this->assertCount(11,$filtered);
    }

    /** @test */
    public function it_can_filter_by_author()
    {
        $vasya = factory(Author::class)->create();
        $petya = factory(Author::class)->create();
        factory(Article::class,3)->create([
            'author_id' => $vasya->id
        ]);
        factory(Article::class,2)->create([
            'author_id' => $petya->id
        ]);

        $vasyaArticles = Article::getFilteredList(['author_id' => $vasya->id]);
        $this->assertCount(3,$vasyaArticles);

    }
}
